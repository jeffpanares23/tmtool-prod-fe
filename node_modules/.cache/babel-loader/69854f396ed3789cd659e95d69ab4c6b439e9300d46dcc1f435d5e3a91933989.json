{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { addWeeks } from \"./addWeeks.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link eachWeekOfInterval} function options.\n */\n\n/**\n * The {@link eachWeekOfInterval} function result type. It resolves the proper data type.\n * It uses the first argument date object type, starting from the interval start date,\n * then the end interval date. If a context function is passed, it uses the context function return type.\n */\n\n/**\n * @name eachWeekOfInterval\n * @category Interval Helpers\n * @summary Return the array of weeks within the specified time interval.\n *\n * @description\n * Return the array of weeks within the specified time interval.\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\n *\n * @example\n * // Each week within interval 6 October 2014 - 23 November 2014:\n * const result = eachWeekOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 10, 23)\n * })\n * //=> [\n * //   Sun Oct 05 2014 00:00:00,\n * //   Sun Oct 12 2014 00:00:00,\n * //   Sun Oct 19 2014 00:00:00,\n * //   Sun Oct 26 2014 00:00:00,\n * //   Sun Nov 02 2014 00:00:00,\n * //   Sun Nov 09 2014 00:00:00,\n * //   Sun Nov 16 2014 00:00:00,\n * //   Sun Nov 23 2014 00:00:00\n * // ]\n */\nexport function eachWeekOfInterval(interval, options) {\n  var _options$step;\n  var _normalizeInterval = normalizeInterval(options === null || options === void 0 ? void 0 : options[\"in\"], interval),\n    start = _normalizeInterval.start,\n    end = _normalizeInterval.end;\n  var reversed = +start > +end;\n  var startDateWeek = reversed ? startOfWeek(end, options) : startOfWeek(start, options);\n  var endDateWeek = reversed ? startOfWeek(start, options) : startOfWeek(end, options);\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n  var endTime = +endDateWeek.getTime();\n  var currentDate = startDateWeek;\n  var step = (_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  var dates = [];\n  while (+currentDate <= endTime) {\n    currentDate.setHours(0);\n    dates.push(constructFrom(start, currentDate));\n    currentDate = addWeeks(currentDate, step);\n    currentDate.setHours(15);\n  }\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachWeekOfInterval;","map":{"version":3,"names":["normalizeInterval","addWeeks","constructFrom","startOfWeek","eachWeekOfInterval","interval","options","_options$step","_normalizeInterval","start","end","reversed","startDateWeek","endDateWeek","setHours","endTime","getTime","currentDate","step","dates","push","reverse"],"sources":["C:/Users/RYZEN 5 5500/Documents/GitHub/OUTSOURCE/TMTOOL/tmtool-prod-fe/node_modules/date-fns/eachWeekOfInterval.js"],"sourcesContent":["import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { addWeeks } from \"./addWeeks.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link eachWeekOfInterval} function options.\n */\n\n/**\n * The {@link eachWeekOfInterval} function result type. It resolves the proper data type.\n * It uses the first argument date object type, starting from the interval start date,\n * then the end interval date. If a context function is passed, it uses the context function return type.\n */\n\n/**\n * @name eachWeekOfInterval\n * @category Interval Helpers\n * @summary Return the array of weeks within the specified time interval.\n *\n * @description\n * Return the array of weeks within the specified time interval.\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\n *\n * @example\n * // Each week within interval 6 October 2014 - 23 November 2014:\n * const result = eachWeekOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 10, 23)\n * })\n * //=> [\n * //   Sun Oct 05 2014 00:00:00,\n * //   Sun Oct 12 2014 00:00:00,\n * //   Sun Oct 19 2014 00:00:00,\n * //   Sun Oct 26 2014 00:00:00,\n * //   Sun Nov 02 2014 00:00:00,\n * //   Sun Nov 09 2014 00:00:00,\n * //   Sun Nov 16 2014 00:00:00,\n * //   Sun Nov 23 2014 00:00:00\n * // ]\n */\nexport function eachWeekOfInterval(interval, options) {\n  const { start, end } = normalizeInterval(options?.in, interval);\n\n  let reversed = +start > +end;\n  const startDateWeek = reversed\n    ? startOfWeek(end, options)\n    : startOfWeek(start, options);\n  const endDateWeek = reversed\n    ? startOfWeek(start, options)\n    : startOfWeek(end, options);\n\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n\n  const endTime = +endDateWeek.getTime();\n  let currentDate = startDateWeek;\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    currentDate.setHours(0);\n    dates.push(constructFrom(start, currentDate));\n    currentDate = addWeeks(currentDate, step);\n    currentDate.setHours(15);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachWeekOfInterval;\n"],"mappings":";;AAAA,SAASA,iBAAiB,QAAQ,6BAA6B;AAC/D,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EAAA,IAAAC,aAAA;EACpD,IAAAC,kBAAA,GAAuBR,iBAAiB,CAACM,OAAO,aAAPA,OAAO,uBAAPA,OAAO,MAAI,EAAED,QAAQ,CAAC;IAAvDI,KAAK,GAAAD,kBAAA,CAALC,KAAK;IAAEC,GAAG,GAAAF,kBAAA,CAAHE,GAAG;EAElB,IAAIC,QAAQ,GAAG,CAACF,KAAK,GAAG,CAACC,GAAG;EAC5B,IAAME,aAAa,GAAGD,QAAQ,GAC1BR,WAAW,CAACO,GAAG,EAAEJ,OAAO,CAAC,GACzBH,WAAW,CAACM,KAAK,EAAEH,OAAO,CAAC;EAC/B,IAAMO,WAAW,GAAGF,QAAQ,GACxBR,WAAW,CAACM,KAAK,EAAEH,OAAO,CAAC,GAC3BH,WAAW,CAACO,GAAG,EAAEJ,OAAO,CAAC;EAE7BM,aAAa,CAACE,QAAQ,CAAC,EAAE,CAAC;EAC1BD,WAAW,CAACC,QAAQ,CAAC,EAAE,CAAC;EAExB,IAAMC,OAAO,GAAG,CAACF,WAAW,CAACG,OAAO,CAAC,CAAC;EACtC,IAAIC,WAAW,GAAGL,aAAa;EAE/B,IAAIM,IAAI,IAAAX,aAAA,GAAGD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEY,IAAI,cAAAX,aAAA,cAAAA,aAAA,GAAI,CAAC;EAC7B,IAAI,CAACW,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZP,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,IAAMQ,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACF,WAAW,IAAIF,OAAO,EAAE;IAC9BE,WAAW,CAACH,QAAQ,CAAC,CAAC,CAAC;IACvBK,KAAK,CAACC,IAAI,CAAClB,aAAa,CAACO,KAAK,EAAEQ,WAAW,CAAC,CAAC;IAC7CA,WAAW,GAAGhB,QAAQ,CAACgB,WAAW,EAAEC,IAAI,CAAC;IACzCD,WAAW,CAACH,QAAQ,CAAC,EAAE,CAAC;EAC1B;EAEA,OAAOH,QAAQ,GAAGQ,KAAK,CAACE,OAAO,CAAC,CAAC,GAAGF,KAAK;AAC3C;;AAEA;AACA,eAAef,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}