{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"flex space-x-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    \"class\": \"px-4 py-2 bg-blue-500 text-white rounded-lg\",\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.exportAsPDF && $options.exportAsPDF.apply($options, arguments);\n    })\n  }, \" Export as PDF \"), _createElementVNode(\"button\", {\n    \"class\": \"px-4 py-2 bg-green-500 text-white rounded-lg\",\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.exportAsCSV && $options.exportAsCSV.apply($options, arguments);\n    })\n  }, \" Export as CSV \")]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","$options","exportAsPDF","apply","arguments","exportAsCSV"],"sources":["C:\\Users\\RYZEN 5 5500\\Documents\\GitHub\\OUTSOURCE\\TMTOOL\\tmtool-prod-fe\\src\\modules\\website-diagnostic-tool\\components\\ExportButtons.vue"],"sourcesContent":["<template>\r\n  <div class=\"flex space-x-4\">\r\n    <!-- Export as PDF -->\r\n    <button\r\n      class=\"px-4 py-2 bg-blue-500 text-white rounded-lg\"\r\n      @click=\"exportAsPDF\"\r\n    >\r\n      Export as PDF\r\n    </button>\r\n\r\n    <!-- Export as CSV -->\r\n    <button\r\n      class=\"px-4 py-2 bg-green-500 text-white rounded-lg\"\r\n      @click=\"exportAsCSV\"\r\n    >\r\n      Export as CSV\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nexport default {\r\n  props: [\"results\"], // Ensure results are passed as a prop\r\n  methods: {\r\n    // Export Results as PDF\r\n    exportAsPDF() {\r\n      const doc = new jsPDF();\r\n      doc.setFontSize(14);\r\n      doc.text(\"Validation Results\", 10, 10);\r\n\r\n      if (Array.isArray(this.results)) {\r\n        doc.autoTable({\r\n          head: [[\"Key\", \"Value\"]],\r\n          body: this.results.map((item) => Object.entries(item)),\r\n        });\r\n      } else {\r\n        doc.text(JSON.stringify(this.results, null, 2), 10, 20);\r\n      }\r\n\r\n      doc.save(\"results.pdf\");\r\n    },\r\n\r\n    // Export Results as CSV\r\n    exportAsCSV() {\r\n      const csvRows = [];\r\n\r\n      // Generate CSV headers\r\n      if (Array.isArray(this.results) && this.results.length > 0) {\r\n        csvRows.push(Object.keys(this.results[0]).join(\",\"));\r\n        this.results.forEach((row) => {\r\n          csvRows.push(Object.values(row).join(\",\"));\r\n        });\r\n      } else if (typeof this.results === \"object\") {\r\n        csvRows.push(Object.keys(this.results).join(\",\"));\r\n        csvRows.push(Object.values(this.results).join(\",\"));\r\n      } else {\r\n        csvRows.push(\"Results\");\r\n        csvRows.push(this.results);\r\n      }\r\n\r\n      const csvContent = csvRows.join(\"\\n\");\r\n      const blob = new Blob([csvContent], { type: \"text/csv\" });\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = \"results.csv\";\r\n      a.click();\r\n      URL.revokeObjectURL(url);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"mappings":";;EACO,SAAM;AAAgB;;uBAA3BA,mBAAA,CAgBM,OAhBNC,UAgBM,GAdJC,mBAAA,CAKS;IAJP,SAAM,6CAA6C;IAClDC,OAAK,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,CAAAC,KAAA,CAAAF,QAAA,EAAAG,SAAA,CAAW;IAAA;KACpB,iBAED,GAGAN,mBAAA,CAKS;IAJP,SAAM,8CAA8C;IACnDC,OAAK,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAEC,QAAA,CAAAI,WAAA,IAAAJ,QAAA,CAAAI,WAAA,CAAAF,KAAA,CAAAF,QAAA,EAAAG,SAAA,CAAW;IAAA;KACpB,iBAED,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}