{"ast":null,"code":"import { constructNow } from \"./constructNow.js\";\n\n/**\n * The {@link endOfTomorrow} function options.\n */\n\n/**\n * @name endOfTomorrow\n * @category Day Helpers\n * @summary Return the end of tomorrow.\n * @pure false\n *\n * @description\n * Return the end of tomorrow.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param options - The options\n * @returns The end of tomorrow\n *\n * @example\n * // If today is 6 October 2014:\n * const result = endOfTomorrow()\n * //=> Tue Oct 7 2014 23:59:59.999\n */\nexport function endOfTomorrow(options) {\n  var now = constructNow(options === null || options === void 0 ? void 0 : options[\"in\"]);\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = constructNow(options === null || options === void 0 ? void 0 : options[\"in\"]);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(23, 59, 59, 999);\n  return options !== null && options !== void 0 && options[\"in\"] ? options[\"in\"](date) : date;\n}\n\n// Fallback for modularized imports:\nexport default endOfTomorrow;","map":{"version":3,"names":["constructNow","endOfTomorrow","options","now","year","getFullYear","month","getMonth","day","getDate","date","setFullYear","setHours"],"sources":["C:/Users/RYZEN 5 5500/Documents/GitHub/OUTSOURCE/TMTOOL/tmtool-prod-fe/node_modules/date-fns/endOfTomorrow.js"],"sourcesContent":["import { constructNow } from \"./constructNow.js\";\n\n/**\n * The {@link endOfTomorrow} function options.\n */\n\n/**\n * @name endOfTomorrow\n * @category Day Helpers\n * @summary Return the end of tomorrow.\n * @pure false\n *\n * @description\n * Return the end of tomorrow.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param options - The options\n * @returns The end of tomorrow\n *\n * @example\n * // If today is 6 October 2014:\n * const result = endOfTomorrow()\n * //=> Tue Oct 7 2014 23:59:59.999\n */\nexport function endOfTomorrow(options) {\n  const now = constructNow(options?.in);\n  const year = now.getFullYear();\n  const month = now.getMonth();\n  const day = now.getDate();\n\n  const date = constructNow(options?.in);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(23, 59, 59, 999);\n  return options?.in ? options.in(date) : date;\n}\n\n// Fallback for modularized imports:\nexport default endOfTomorrow;\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mBAAmB;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,OAAO,EAAE;EACrC,IAAMC,GAAG,GAAGH,YAAY,CAACE,OAAO,aAAPA,OAAO,uBAAPA,OAAO,MAAI,CAAC;EACrC,IAAME,IAAI,GAAGD,GAAG,CAACE,WAAW,CAAC,CAAC;EAC9B,IAAMC,KAAK,GAAGH,GAAG,CAACI,QAAQ,CAAC,CAAC;EAC5B,IAAMC,GAAG,GAAGL,GAAG,CAACM,OAAO,CAAC,CAAC;EAEzB,IAAMC,IAAI,GAAGV,YAAY,CAACE,OAAO,aAAPA,OAAO,uBAAPA,OAAO,MAAI,CAAC;EACtCQ,IAAI,CAACC,WAAW,CAACP,IAAI,EAAEE,KAAK,EAAEE,GAAG,GAAG,CAAC,CAAC;EACtCE,IAAI,CAACE,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;EAC9B,OAAOV,OAAO,aAAPA,OAAO,eAAPA,OAAO,MAAI,GAAGA,OAAO,MAAG,CAACQ,IAAI,CAAC,GAAGA,IAAI;AAC9C;;AAEA;AACA,eAAeT,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}