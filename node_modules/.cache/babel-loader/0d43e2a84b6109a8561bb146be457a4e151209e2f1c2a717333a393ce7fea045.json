{"ast":null,"code":"import _slicedToArray from \"C:/Users/RYZEN 5 5500/Documents/GitHub/OUTSOURCE/TMTOOL/tmtool-prod-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link areIntervalsOverlapping} function options.\n */\n\n/**\n * @name areIntervalsOverlapping\n * @category Interval Helpers\n * @summary Is the given time interval overlapping with another time interval?\n *\n * @description\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n * @param options - The object with options\n *\n * @returns Whether the time intervals are overlapping\n *\n * @example\n * // For overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> false\n *\n * @example\n * // For adjacent time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n * )\n * //=> false\n *\n * @example\n * // Using the inclusive option:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n *   { inclusive: true }\n * )\n * //=> true\n */\nexport function areIntervalsOverlapping(intervalLeft, intervalRight, options) {\n  var _sort = [+toDate(intervalLeft.start, options === null || options === void 0 ? void 0 : options[\"in\"]), +toDate(intervalLeft.end, options === null || options === void 0 ? void 0 : options[\"in\"])].sort(function (a, b) {\n      return a - b;\n    }),\n    _sort2 = _slicedToArray(_sort, 2),\n    leftStartTime = _sort2[0],\n    leftEndTime = _sort2[1];\n  var _sort3 = [+toDate(intervalRight.start, options === null || options === void 0 ? void 0 : options[\"in\"]), +toDate(intervalRight.end, options === null || options === void 0 ? void 0 : options[\"in\"])].sort(function (a, b) {\n      return a - b;\n    }),\n    _sort4 = _slicedToArray(_sort3, 2),\n    rightStartTime = _sort4[0],\n    rightEndTime = _sort4[1];\n  if (options !== null && options !== void 0 && options.inclusive) return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}\n\n// Fallback for modularized imports:\nexport default areIntervalsOverlapping;","map":{"version":3,"names":["toDate","areIntervalsOverlapping","intervalLeft","intervalRight","options","_sort","start","end","sort","a","b","_sort2","_slicedToArray","leftStartTime","leftEndTime","_sort3","_sort4","rightStartTime","rightEndTime","inclusive"],"sources":["C:/Users/RYZEN 5 5500/Documents/GitHub/OUTSOURCE/TMTOOL/tmtool-prod-fe/node_modules/date-fns/areIntervalsOverlapping.js"],"sourcesContent":["import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link areIntervalsOverlapping} function options.\n */\n\n/**\n * @name areIntervalsOverlapping\n * @category Interval Helpers\n * @summary Is the given time interval overlapping with another time interval?\n *\n * @description\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n * @param options - The object with options\n *\n * @returns Whether the time intervals are overlapping\n *\n * @example\n * // For overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> false\n *\n * @example\n * // For adjacent time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n * )\n * //=> false\n *\n * @example\n * // Using the inclusive option:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n *   { inclusive: true }\n * )\n * //=> true\n */\nexport function areIntervalsOverlapping(intervalLeft, intervalRight, options) {\n  const [leftStartTime, leftEndTime] = [\n    +toDate(intervalLeft.start, options?.in),\n    +toDate(intervalLeft.end, options?.in),\n  ].sort((a, b) => a - b);\n  const [rightStartTime, rightEndTime] = [\n    +toDate(intervalRight.start, options?.in),\n    +toDate(intervalRight.end, options?.in),\n  ].sort((a, b) => a - b);\n\n  if (options?.inclusive)\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}\n\n// Fallback for modularized imports:\nexport default areIntervalsOverlapping;\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACC,YAAY,EAAEC,aAAa,EAAEC,OAAO,EAAE;EAC5E,IAAAC,KAAA,GAAqC,CACnC,CAACL,MAAM,CAACE,YAAY,CAACI,KAAK,EAAEF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,MAAI,CAAC,EACxC,CAACJ,MAAM,CAACE,YAAY,CAACK,GAAG,EAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,MAAI,CAAC,CACvC,CAACI,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKD,CAAC,GAAGC,CAAC;IAAA,EAAC;IAAAC,MAAA,GAAAC,cAAA,CAAAP,KAAA;IAHhBQ,aAAa,GAAAF,MAAA;IAAEG,WAAW,GAAAH,MAAA;EAIjC,IAAAI,MAAA,GAAuC,CACrC,CAACf,MAAM,CAACG,aAAa,CAACG,KAAK,EAAEF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,MAAI,CAAC,EACzC,CAACJ,MAAM,CAACG,aAAa,CAACI,GAAG,EAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,MAAI,CAAC,CACxC,CAACI,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKD,CAAC,GAAGC,CAAC;IAAA,EAAC;IAAAM,MAAA,GAAAJ,cAAA,CAAAG,MAAA;IAHhBE,cAAc,GAAAD,MAAA;IAAEE,YAAY,GAAAF,MAAA;EAKnC,IAAIZ,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEe,SAAS,EACpB,OAAON,aAAa,IAAIK,YAAY,IAAID,cAAc,IAAIH,WAAW;EAEvE,OAAOD,aAAa,GAAGK,YAAY,IAAID,cAAc,GAAGH,WAAW;AACrE;;AAEA;AACA,eAAeb,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}