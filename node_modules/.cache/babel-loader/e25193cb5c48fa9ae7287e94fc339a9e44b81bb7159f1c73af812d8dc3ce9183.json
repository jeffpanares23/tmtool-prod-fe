{"ast":null,"code":"import { addDays } from \"./addDays.js\";\nimport { addMonths } from \"./addMonths.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link add} function options.\n */\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\n *\n * @typeParam DateType - The `Date` type the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param duration - The object with years, months, weeks, days, hours, minutes, and seconds to be added.\n * @param options - An object with options\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport function add(date, duration, options) {\n  var _duration$years = duration.years,\n    years = _duration$years === void 0 ? 0 : _duration$years,\n    _duration$months = duration.months,\n    months = _duration$months === void 0 ? 0 : _duration$months,\n    _duration$weeks = duration.weeks,\n    weeks = _duration$weeks === void 0 ? 0 : _duration$weeks,\n    _duration$days = duration.days,\n    days = _duration$days === void 0 ? 0 : _duration$days,\n    _duration$hours = duration.hours,\n    hours = _duration$hours === void 0 ? 0 : _duration$hours,\n    _duration$minutes = duration.minutes,\n    minutes = _duration$minutes === void 0 ? 0 : _duration$minutes,\n    _duration$seconds = duration.seconds,\n    seconds = _duration$seconds === void 0 ? 0 : _duration$seconds;\n\n  // Add years and months\n  var _date = toDate(date, options === null || options === void 0 ? void 0 : options[\"in\"]);\n  var dateWithMonths = months || years ? addMonths(_date, months + years * 12) : _date;\n\n  // Add weeks and days\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\n\n  // Add days, hours, minutes, and seconds\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  return constructFrom((options === null || options === void 0 ? void 0 : options[\"in\"]) || date, +dateWithDays + msToAdd);\n}\n\n// Fallback for modularized imports:\nexport default add;","map":{"version":3,"names":["addDays","addMonths","constructFrom","toDate","add","date","duration","options","_duration$years","years","_duration$months","months","_duration$weeks","weeks","_duration$days","days","_duration$hours","hours","_duration$minutes","minutes","_duration$seconds","seconds","_date","dateWithMonths","dateWithDays","minutesToAdd","secondsToAdd","msToAdd"],"sources":["C:/Users/RYZEN 5 5500/Documents/GitHub/OUTSOURCE/TMTOOL/tmtool-prod-fe/node_modules/date-fns/add.js"],"sourcesContent":["import { addDays } from \"./addDays.js\";\nimport { addMonths } from \"./addMonths.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link add} function options.\n */\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\n *\n * @typeParam DateType - The `Date` type the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param duration - The object with years, months, weeks, days, hours, minutes, and seconds to be added.\n * @param options - An object with options\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport function add(date, duration, options) {\n  const {\n    years = 0,\n    months = 0,\n    weeks = 0,\n    days = 0,\n    hours = 0,\n    minutes = 0,\n    seconds = 0,\n  } = duration;\n\n  // Add years and months\n  const _date = toDate(date, options?.in);\n  const dateWithMonths =\n    months || years ? addMonths(_date, months + years * 12) : _date;\n\n  // Add weeks and days\n  const dateWithDays =\n    days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\n\n  // Add days, hours, minutes, and seconds\n  const minutesToAdd = minutes + hours * 60;\n  const secondsToAdd = seconds + minutesToAdd * 60;\n  const msToAdd = secondsToAdd * 1000;\n\n  return constructFrom(options?.in || date, +dateWithDays + msToAdd);\n}\n\n// Fallback for modularized imports:\nexport default add;\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAGA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAC3C,IAAAC,eAAA,GAQIF,QAAQ,CAPVG,KAAK;IAALA,KAAK,GAAAD,eAAA,cAAG,CAAC,GAAAA,eAAA;IAAAE,gBAAA,GAOPJ,QAAQ,CANVK,MAAM;IAANA,MAAM,GAAAD,gBAAA,cAAG,CAAC,GAAAA,gBAAA;IAAAE,eAAA,GAMRN,QAAQ,CALVO,KAAK;IAALA,KAAK,GAAAD,eAAA,cAAG,CAAC,GAAAA,eAAA;IAAAE,cAAA,GAKPR,QAAQ,CAJVS,IAAI;IAAJA,IAAI,GAAAD,cAAA,cAAG,CAAC,GAAAA,cAAA;IAAAE,eAAA,GAINV,QAAQ,CAHVW,KAAK;IAALA,KAAK,GAAAD,eAAA,cAAG,CAAC,GAAAA,eAAA;IAAAE,iBAAA,GAGPZ,QAAQ,CAFVa,OAAO;IAAPA,OAAO,GAAAD,iBAAA,cAAG,CAAC,GAAAA,iBAAA;IAAAE,iBAAA,GAETd,QAAQ,CADVe,OAAO;IAAPA,OAAO,GAAAD,iBAAA,cAAG,CAAC,GAAAA,iBAAA;;EAGb;EACA,IAAME,KAAK,GAAGnB,MAAM,CAACE,IAAI,EAAEE,OAAO,aAAPA,OAAO,uBAAPA,OAAO,MAAI,CAAC;EACvC,IAAMgB,cAAc,GAClBZ,MAAM,IAAIF,KAAK,GAAGR,SAAS,CAACqB,KAAK,EAAEX,MAAM,GAAGF,KAAK,GAAG,EAAE,CAAC,GAAGa,KAAK;;EAEjE;EACA,IAAME,YAAY,GAChBT,IAAI,IAAIF,KAAK,GAAGb,OAAO,CAACuB,cAAc,EAAER,IAAI,GAAGF,KAAK,GAAG,CAAC,CAAC,GAAGU,cAAc;;EAE5E;EACA,IAAME,YAAY,GAAGN,OAAO,GAAGF,KAAK,GAAG,EAAE;EACzC,IAAMS,YAAY,GAAGL,OAAO,GAAGI,YAAY,GAAG,EAAE;EAChD,IAAME,OAAO,GAAGD,YAAY,GAAG,IAAI;EAEnC,OAAOxB,aAAa,CAAC,CAAAK,OAAO,aAAPA,OAAO,uBAAPA,OAAO,MAAI,KAAIF,IAAI,EAAE,CAACmB,YAAY,GAAGG,OAAO,CAAC;AACpE;;AAEA;AACA,eAAevB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}