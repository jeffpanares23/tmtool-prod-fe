{"ast":null,"code":"import _toConsumableArray from \"C:/Users/RYZEN 5 5500/Documents/GitHub/OUTSOURCE/TMTOOL/tmtool-prod-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/RYZEN 5 5500/Documents/GitHub/OUTSOURCE/TMTOOL/tmtool-prod-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { millisecondsInMinute, minutesInDay, minutesInMonth, minutesInYear } from \"./constants.js\";\n\n/**\n * The {@link formatDistanceStrict} function options.\n */\n\n/**\n * The unit used to format the distance in {@link formatDistanceStrict}.\n */\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param laterDate - The date\n * @param earlierDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport function formatDistanceStrict(laterDate, earlierDate, options) {\n  var _ref, _options$locale, _options$roundingMeth;\n  var defaultOptions = getDefaultOptions();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n  var comparison = compareAsc(laterDate, earlierDate);\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n  var localizeOptions = Object.assign({}, options, {\n    addSuffix: options === null || options === void 0 ? void 0 : options.addSuffix,\n    comparison: comparison\n  });\n  var _normalizeDates = normalizeDates.apply(void 0, [options === null || options === void 0 ? void 0 : options[\"in\"]].concat(_toConsumableArray(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]))),\n    _normalizeDates2 = _slicedToArray(_normalizeDates, 2),\n    laterDate_ = _normalizeDates2[0],\n    earlierDate_ = _normalizeDates2[1];\n  var roundingMethod = getRoundingMethod((_options$roundingMeth = options === null || options === void 0 ? void 0 : options.roundingMethod) !== null && _options$roundingMeth !== void 0 ? _options$roundingMeth : \"round\");\n  var milliseconds = earlierDate_.getTime() - laterDate_.getTime();\n  var minutes = milliseconds / millisecondsInMinute;\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(earlierDate_) - getTimezoneOffsetInMilliseconds(laterDate_);\n\n  // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n  var dstNormalizedMinutes = (milliseconds - timezoneOffset) / millisecondsInMinute;\n  var defaultUnit = options === null || options === void 0 ? void 0 : options.unit;\n  var unit;\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = \"second\";\n    } else if (minutes < 60) {\n      unit = \"minute\";\n    } else if (minutes < minutesInDay) {\n      unit = \"hour\";\n    } else if (dstNormalizedMinutes < minutesInMonth) {\n      unit = \"day\";\n    } else if (dstNormalizedMinutes < minutesInYear) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n  } else {\n    unit = defaultUnit;\n  }\n\n  // 0 up to 60 seconds\n  if (unit === \"second\") {\n    var seconds = roundingMethod(milliseconds / 1000);\n    return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\n\n    // 1 up to 60 mins\n  } else if (unit === \"minute\") {\n    var roundedMinutes = roundingMethod(minutes);\n    return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\n\n    // 1 up to 24 hours\n  } else if (unit === \"hour\") {\n    var hours = roundingMethod(minutes / 60);\n    return locale.formatDistance(\"xHours\", hours, localizeOptions);\n\n    // 1 up to 30 days\n  } else if (unit === \"day\") {\n    var days = roundingMethod(dstNormalizedMinutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 up to 12 months\n  } else if (unit === \"month\") {\n    var months = roundingMethod(dstNormalizedMinutes / minutesInMonth);\n    return months === 12 && defaultUnit !== \"month\" ? locale.formatDistance(\"xYears\", 1, localizeOptions) : locale.formatDistance(\"xMonths\", months, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    var years = roundingMethod(dstNormalizedMinutes / minutesInYear);\n    return locale.formatDistance(\"xYears\", years, localizeOptions);\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceStrict;","map":{"version":3,"names":["defaultLocale","getDefaultOptions","getRoundingMethod","getTimezoneOffsetInMilliseconds","normalizeDates","compareAsc","millisecondsInMinute","minutesInDay","minutesInMonth","minutesInYear","formatDistanceStrict","laterDate","earlierDate","options","_ref","_options$locale","_options$roundingMeth","defaultOptions","locale","comparison","isNaN","RangeError","localizeOptions","Object","assign","addSuffix","_normalizeDates","apply","concat","_toConsumableArray","_normalizeDates2","_slicedToArray","laterDate_","earlierDate_","roundingMethod","milliseconds","getTime","minutes","timezoneOffset","dstNormalizedMinutes","defaultUnit","unit","seconds","formatDistance","roundedMinutes","hours","days","months","years"],"sources":["C:/Users/RYZEN 5 5500/Documents/GitHub/OUTSOURCE/TMTOOL/tmtool-prod-fe/node_modules/date-fns/formatDistanceStrict.js"],"sourcesContent":["import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport {\n  millisecondsInMinute,\n  minutesInDay,\n  minutesInMonth,\n  minutesInYear,\n} from \"./constants.js\";\n\n/**\n * The {@link formatDistanceStrict} function options.\n */\n\n/**\n * The unit used to format the distance in {@link formatDistanceStrict}.\n */\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param laterDate - The date\n * @param earlierDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport function formatDistanceStrict(laterDate, earlierDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const comparison = compareAsc(laterDate, earlierDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),\n  );\n\n  const roundingMethod = getRoundingMethod(options?.roundingMethod ?? \"round\");\n\n  const milliseconds = earlierDate_.getTime() - laterDate_.getTime();\n  const minutes = milliseconds / millisecondsInMinute;\n\n  const timezoneOffset =\n    getTimezoneOffsetInMilliseconds(earlierDate_) -\n    getTimezoneOffsetInMilliseconds(laterDate_);\n\n  // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n  const dstNormalizedMinutes =\n    (milliseconds - timezoneOffset) / millisecondsInMinute;\n\n  const defaultUnit = options?.unit;\n  let unit;\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = \"second\";\n    } else if (minutes < 60) {\n      unit = \"minute\";\n    } else if (minutes < minutesInDay) {\n      unit = \"hour\";\n    } else if (dstNormalizedMinutes < minutesInMonth) {\n      unit = \"day\";\n    } else if (dstNormalizedMinutes < minutesInYear) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n  } else {\n    unit = defaultUnit;\n  }\n\n  // 0 up to 60 seconds\n  if (unit === \"second\") {\n    const seconds = roundingMethod(milliseconds / 1000);\n    return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\n\n    // 1 up to 60 mins\n  } else if (unit === \"minute\") {\n    const roundedMinutes = roundingMethod(minutes);\n    return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\n\n    // 1 up to 24 hours\n  } else if (unit === \"hour\") {\n    const hours = roundingMethod(minutes / 60);\n    return locale.formatDistance(\"xHours\", hours, localizeOptions);\n\n    // 1 up to 30 days\n  } else if (unit === \"day\") {\n    const days = roundingMethod(dstNormalizedMinutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 up to 12 months\n  } else if (unit === \"month\") {\n    const months = roundingMethod(dstNormalizedMinutes / minutesInMonth);\n    return months === 12 && defaultUnit !== \"month\"\n      ? locale.formatDistance(\"xYears\", 1, localizeOptions)\n      : locale.formatDistance(\"xMonths\", months, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const years = roundingMethod(dstNormalizedMinutes / minutesInYear);\n    return locale.formatDistance(\"xYears\", years, localizeOptions);\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceStrict;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}