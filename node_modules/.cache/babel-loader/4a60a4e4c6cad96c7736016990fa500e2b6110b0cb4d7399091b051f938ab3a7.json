{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { addQuarters } from \"./addQuarters.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfQuarter } from \"./startOfQuarter.js\";\n\n/**\n * The {@link eachQuarterOfInterval} function options.\n */\n\n/**\n * The {@link eachQuarterOfInterval} function result type. It resolves the proper data type.\n * It uses the first argument date object type, starting from the date argument,\n * then the start interval date, and finally the end interval date. If\n * a context function is passed, it uses the context function return type.\n */\n\n/**\n * @name eachQuarterOfInterval\n * @category Interval Helpers\n * @summary Return the array of quarters within the specified time interval.\n *\n * @description\n * Return the array of quarters within the specified time interval.\n *\n * @typeParam IntervalType - Interval type.\n * @typeParam Options - Options type.\n *\n * @param interval - The interval\n * @param options - An object with options\n *\n * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n *\n * @example\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\n * const result = eachQuarterOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10),\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * // ]\n */\nexport function eachQuarterOfInterval(interval, options) {\n  var _options$step;\n  var _normalizeInterval = normalizeInterval(options === null || options === void 0 ? void 0 : options[\"in\"], interval),\n    start = _normalizeInterval.start,\n    end = _normalizeInterval.end;\n  var reversed = +start > +end;\n  var endTime = reversed ? +startOfQuarter(start) : +startOfQuarter(end);\n  var date = reversed ? startOfQuarter(end) : startOfQuarter(start);\n  var step = (_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  var dates = [];\n  while (+date <= endTime) {\n    dates.push(constructFrom(start, date));\n    date = addQuarters(date, step);\n  }\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachQuarterOfInterval;","map":{"version":3,"names":["normalizeInterval","addQuarters","constructFrom","startOfQuarter","eachQuarterOfInterval","interval","options","_options$step","_normalizeInterval","start","end","reversed","endTime","date","step","dates","push","reverse"],"sources":["C:/Users/RYZEN 5 5500/Documents/GitHub/OUTSOURCE/TMTOOL/tmtool-prod-fe/node_modules/date-fns/eachQuarterOfInterval.js"],"sourcesContent":["import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { addQuarters } from \"./addQuarters.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfQuarter } from \"./startOfQuarter.js\";\n\n/**\n * The {@link eachQuarterOfInterval} function options.\n */\n\n/**\n * The {@link eachQuarterOfInterval} function result type. It resolves the proper data type.\n * It uses the first argument date object type, starting from the date argument,\n * then the start interval date, and finally the end interval date. If\n * a context function is passed, it uses the context function return type.\n */\n\n/**\n * @name eachQuarterOfInterval\n * @category Interval Helpers\n * @summary Return the array of quarters within the specified time interval.\n *\n * @description\n * Return the array of quarters within the specified time interval.\n *\n * @typeParam IntervalType - Interval type.\n * @typeParam Options - Options type.\n *\n * @param interval - The interval\n * @param options - An object with options\n *\n * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n *\n * @example\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\n * const result = eachQuarterOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10),\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * // ]\n */\nexport function eachQuarterOfInterval(interval, options) {\n  const { start, end } = normalizeInterval(options?.in, interval);\n\n  let reversed = +start > +end;\n  const endTime = reversed ? +startOfQuarter(start) : +startOfQuarter(end);\n  let date = reversed ? startOfQuarter(end) : startOfQuarter(start);\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+date <= endTime) {\n    dates.push(constructFrom(start, date));\n    date = addQuarters(date, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachQuarterOfInterval;\n"],"mappings":";;AAAA,SAASA,iBAAiB,QAAQ,6BAA6B;AAC/D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,cAAc,QAAQ,qBAAqB;;AAEpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EAAA,IAAAC,aAAA;EACvD,IAAAC,kBAAA,GAAuBR,iBAAiB,CAACM,OAAO,aAAPA,OAAO,uBAAPA,OAAO,MAAI,EAAED,QAAQ,CAAC;IAAvDI,KAAK,GAAAD,kBAAA,CAALC,KAAK;IAAEC,GAAG,GAAAF,kBAAA,CAAHE,GAAG;EAElB,IAAIC,QAAQ,GAAG,CAACF,KAAK,GAAG,CAACC,GAAG;EAC5B,IAAME,OAAO,GAAGD,QAAQ,GAAG,CAACR,cAAc,CAACM,KAAK,CAAC,GAAG,CAACN,cAAc,CAACO,GAAG,CAAC;EACxE,IAAIG,IAAI,GAAGF,QAAQ,GAAGR,cAAc,CAACO,GAAG,CAAC,GAAGP,cAAc,CAACM,KAAK,CAAC;EAEjE,IAAIK,IAAI,IAAAP,aAAA,GAAGD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEQ,IAAI,cAAAP,aAAA,cAAAA,aAAA,GAAI,CAAC;EAC7B,IAAI,CAACO,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZH,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,IAAMI,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACF,IAAI,IAAID,OAAO,EAAE;IACvBG,KAAK,CAACC,IAAI,CAACd,aAAa,CAACO,KAAK,EAAEI,IAAI,CAAC,CAAC;IACtCA,IAAI,GAAGZ,WAAW,CAACY,IAAI,EAAEC,IAAI,CAAC;EAChC;EAEA,OAAOH,QAAQ,GAAGI,KAAK,CAACE,OAAO,CAAC,CAAC,GAAGF,KAAK;AAC3C;;AAEA;AACA,eAAeX,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}