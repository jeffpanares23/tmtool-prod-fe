{"ast":null,"code":"import _slicedToArray from \"C:/Users/RYZEN 5 5500/Documents/GitHub/OUTSOURCE/TMTOOL/tmtool-prod-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link interval} function options.\n */\n\n/**\n * The {@link interval} function result type. It resolves the proper data type.\n * It uses the first argument date object type, starting from the start argument,\n * then the end interval date. If a context function is passed, it uses the context\n * function return type.\n */\n\n/**\n * @name interval\n * @category Interval Helpers\n * @summary Creates an interval object and validates its values.\n *\n * @description\n * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.\n *\n * @typeParam StartDate - Start date type.\n * @typeParam EndDate - End date type.\n * @typeParam Options - Options type.\n *\n * @param start - The start of the interval.\n * @param end - The end of the interval.\n * @param options - The options object.\n *\n * @throws `Start date is invalid` when `start` is invalid.\n * @throws `End date is invalid` when `end` is invalid.\n * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.\n *\n * @returns The normalized and validated interval object.\n */\nexport function interval(start, end, options) {\n  var _normalizeDates = normalizeDates(options === null || options === void 0 ? void 0 : options[\"in\"], start, end),\n    _normalizeDates2 = _slicedToArray(_normalizeDates, 2),\n    _start = _normalizeDates2[0],\n    _end = _normalizeDates2[1];\n  if (isNaN(+_start)) throw new TypeError(\"Start date is invalid\");\n  if (isNaN(+_end)) throw new TypeError(\"End date is invalid\");\n  if (options !== null && options !== void 0 && options.assertPositive && +_start > +_end) throw new TypeError(\"End date must be after start date\");\n  return {\n    start: _start,\n    end: _end\n  };\n}\n\n// Fallback for modularized imports:\nexport default interval;","map":{"version":3,"names":["normalizeDates","interval","start","end","options","_normalizeDates","_normalizeDates2","_slicedToArray","_start","_end","isNaN","TypeError","assertPositive"],"sources":["C:/Users/RYZEN 5 5500/Documents/GitHub/OUTSOURCE/TMTOOL/tmtool-prod-fe/node_modules/date-fns/interval.js"],"sourcesContent":["import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link interval} function options.\n */\n\n/**\n * The {@link interval} function result type. It resolves the proper data type.\n * It uses the first argument date object type, starting from the start argument,\n * then the end interval date. If a context function is passed, it uses the context\n * function return type.\n */\n\n/**\n * @name interval\n * @category Interval Helpers\n * @summary Creates an interval object and validates its values.\n *\n * @description\n * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.\n *\n * @typeParam StartDate - Start date type.\n * @typeParam EndDate - End date type.\n * @typeParam Options - Options type.\n *\n * @param start - The start of the interval.\n * @param end - The end of the interval.\n * @param options - The options object.\n *\n * @throws `Start date is invalid` when `start` is invalid.\n * @throws `End date is invalid` when `end` is invalid.\n * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.\n *\n * @returns The normalized and validated interval object.\n */\nexport function interval(start, end, options) {\n  const [_start, _end] = normalizeDates(options?.in, start, end);\n\n  if (isNaN(+_start)) throw new TypeError(\"Start date is invalid\");\n  if (isNaN(+_end)) throw new TypeError(\"End date is invalid\");\n\n  if (options?.assertPositive && +_start > +_end)\n    throw new TypeError(\"End date must be after start date\");\n\n  return { start: _start, end: _end };\n}\n\n// Fallback for modularized imports:\nexport default interval;\n"],"mappings":";;;AAAA,SAASA,cAAc,QAAQ,0BAA0B;;AAEzD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,KAAK,EAAEC,GAAG,EAAEC,OAAO,EAAE;EAC5C,IAAAC,eAAA,GAAuBL,cAAc,CAACI,OAAO,aAAPA,OAAO,uBAAPA,OAAO,MAAI,EAAEF,KAAK,EAAEC,GAAG,CAAC;IAAAG,gBAAA,GAAAC,cAAA,CAAAF,eAAA;IAAvDG,MAAM,GAAAF,gBAAA;IAAEG,IAAI,GAAAH,gBAAA;EAEnB,IAAII,KAAK,CAAC,CAACF,MAAM,CAAC,EAAE,MAAM,IAAIG,SAAS,CAAC,uBAAuB,CAAC;EAChE,IAAID,KAAK,CAAC,CAACD,IAAI,CAAC,EAAE,MAAM,IAAIE,SAAS,CAAC,qBAAqB,CAAC;EAE5D,IAAIP,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEQ,cAAc,IAAI,CAACJ,MAAM,GAAG,CAACC,IAAI,EAC5C,MAAM,IAAIE,SAAS,CAAC,mCAAmC,CAAC;EAE1D,OAAO;IAAET,KAAK,EAAEM,MAAM;IAAEL,GAAG,EAAEM;EAAK,CAAC;AACrC;;AAEA;AACA,eAAeR,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}